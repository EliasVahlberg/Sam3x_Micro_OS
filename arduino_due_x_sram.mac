// ----------------------------------------------------------------------------
//         ATMEL Microcontroller Software Support
// ----------------------------------------------------------------------------
// Copyright (c) 2010-2012, Atmel Corporation
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted  provided that the following conditions are met:
//
// - Redistributions of source code must retain the above copyright notice,
// this list of conditions and the disclaimer below.
//
// Atmel's name may not be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
// DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ----------------------------------------------------------------------------

/*********************************************************************
*
*       execUserReset()
*/
execUserReset()
{
    __message "------------------------------ execUserReset ---------------------------------";

    // Hardware Reset: CPU is automatically halted after the reset
    __hwReset(0);

    // peripheral reset RSTC_CR
    __writeMemory32(0xA5000004,0x400e1A00,"Memory");
}

/*********************************************************************
*
*       execUserPreload()
*/
execUserPreload()
{
    __message "------------------------------ execUserPreload ---------------------------------";

	// Hardware Reset: CPU is automatically halted after the reset
    __hwReset(0);

    // peripheral reset RSTC_CR
    __writeMemory32(0xA5000004,0x400e1A00,"Memory");
}

/*********************************************************************
*
*       execUserFlashInit()
*/
execUserFlashInit()
{
    __message "------------------------------ execUserFlashInit ---------------------------------";

   // perpheral reset RSTC_CR
   __writeMemory32(0xA5000004,0x400e1A00,"Memory");
}

/*********************************************************************
*
*       execUserFlashExit()
*/
execUserFlashExit()
{
    __message "------------------------------ execUserFlashExit ---------------------------------";
}


ClearMemFile()
{
    __var _fileHandle;
    _fileHandle = __openFile("$PROJ_DIR$\\Memory.txt", "w");
    __writeFile( _fileHandle, 0); 
    __closeFile( _fileHandle );
    _fileHandle = __openFile("$PROJ_DIR$\\Memory2.txt", "w");
    __writeFile( _fileHandle, 0); 
    __closeFile( _fileHandle );
}
WriteMemory2File(adress, size)
{
    __var _fileHandle;
    adress = (int) adress;
    size = (int) size;
    //__message "------------------------------ HEY---------------------------------";

    _fileHandle = __openFile("$PROJ_DIR$\\Memory.txt", "a"); 
    if(_fileHandle)
    {
    __writeFile( _fileHandle, adress);
    __writeFile( _fileHandle, size);
    __closeFile( _fileHandle );
    }

}

WriteFreeMemory2File(adress)
{
    __var _fileHandle,fsymb;
    adress = (int) adress;
    fsymb=0xffffffff;

    //__message "------------------------------ HEY2---------------------------------";

    _fileHandle = __openFile("$PROJ_DIR$\\Memory.txt", "a"); 
    if(_fileHandle)
    {
    __writeFile( _fileHandle, fsymb);
    __writeFile( _fileHandle, adress);
    }
    __closeFile( _fileHandle );

}

WriteMemory2FileExtended(adress, size)
{
    __var _fileHandle, i,fsymb;
    adress = (int) adress;
    size = (int) size;
    //__message "------------------------------ HEY3---------------------------------";

    _fileHandle = __openFile("$PROJ_DIR$\\Memory2.txt", "a"); 
    if(_fileHandle)
    {
        if(size)
        {

            fsymb=0xffffffee;
            __writeFile( _fileHandle, fsymb);
            for(i = adress; i<adress+size;i++)
            {
                __writeFile( _fileHandle, i);
            }
        }
        else
        {
            
            fsymb=0xffffffff;
            __writeFile( _fileHandle, fsymb);
            __writeFile( _fileHandle, adress);
        }
    __closeFile( _fileHandle );
    }

}